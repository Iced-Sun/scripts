#!/bin/bash

GRUB_CONFIG=/boot/grub/grub.cfg
BOOT_DEVICE="(hd0,msdos1)"
BOOT_DEVICE_UUID="0a43ecb2-a6f2-4cd1-8265-1c21050065c6"
LINUX_DEVICE="root=/dev/sda2 ro rootflags=subvol=@"
KERNEL_OPTS=""

TOI_HEADER="/sys/power/tuxonice/swap/headerlocations"
if [[ -f "${TOI_HEADER}" ]]; then
    STRING=`<${TOI_HEADER}`
    OPT=`echo ${STRING} | cut -d= -f2`
    [[ "${STRING}" != "${OPT}" ]] && KERNEL_OPTS+=" resume=${OPT%.}"
fi

function build_kernel()
{
    [[ -f ./kernel/Makefile ]] && WORK=. || WORK=/usr/src/linux
    pushd $WORK >/dev/null

    echo "Making bzImage...."
    export PATH="/usr/libexec/distcc:${PATH}"
    export DISTCC_HOSTS='10.2.112.3,lzo'
    if make -j8; then
	RELEASE=`<${WORK}/include/config/kernel.release`
	popd  >/dev/null
	return 0
    else
	popd  >/dev/null
	return 1
    fi
}

function install_kernel()
{
    echo "Installing kernel...."
    echo -e "\t`cp -v arch/x86_64/boot/bzImage /boot/vmlinuz-${RELEASE}`"
    echo -e "\t`cp -v .config /boot/config-${RELEASE}`"
    echo -e "\t`cp -v .config /data/repositories/conf/$(hostname)-config-${RELEASE}`"
    echo -e "\t`cp -v System.map /boot/System.map-${RELEASE}`"

    echo "Installing modules...."
    make modules_install >/dev/null

    which dracut 2>&1 >/dev/null && dracut --xz --force /boot/initramfs-${RELEASE}.img ${RELEASE} #&& rm -rf /lib/modules/${RELEASE}
}

function do_grub_mkconfig()
{
    echo "Update grub configuration using grub-mkconfig...."

    # workaround for grub
    pushd /dev
    [[ -e root ]] || ln -s sda2 root
    popd

    # set environment for grub_mkconfig
    local DEFAULT
    read -r -d '' DEFAULT <<EOF
GRUB_DEFAULT="1"
GRUB_TIMEOUT="8"
GRUB_GFXMODE="1024x768"
GRUB_TERMINAL_OUTPUT="console"
LANG="zh_CN"

GRUB_DISTRIBUTOR="Exherbo"
GRUB_CMDLINE_LINUX="${KERNEL_OPTS}"
GRUB_DISABLE_RECOVERY=true

GRUB_DISABLE_OS_PROBER=true
EOF
    eval ${DEFAULT} /sbin/grub-mkconfig -o ${GRUB_CONFIG}

    unlink /dev/root
}

function do_my_grub_config()
{
    cat <<'EOF'
if [ -s $prefix/grubenv ]; then
  load_env
fi

function load_video {
  if [ x$feature_all_video_module = xy ]; then
    insmod all_video
  else
    insmod efi_gop
    insmod efi_uga
    insmod ieee1275_fb
    insmod vbe
    insmod vga
    insmod video_bochs
    insmod video_cirrus
  fi
}

if loadfont unicode ; then
  set gfxmode=auto
  set gfxpayload=keep
  load_video
  insmod gfxterm
  set locale_dir=$prefix/locale
  set lang=zh_CN
  insmod gettext
fi
terminal_output gfxterm

set default=0
set timeout=8
set pager=1
EOF

#    generate_windows_entry
    generate_linux_entry
    generate_rescue_entry
}

function generate_windows_entry()
{
    cat <<EOF
menuentry 'Windows' {
        search --no-floppy --file --set=root /bootmgr
        chainloader +1
}
EOF
}

function generate_linux_entry()
{
    for kernel in `ls /boot/vmlinuz* |sort -r`; do
	kernel=`basename ${kernel}`
	release=${kernel#vmlinuz-}
	cat <<EOF
menuentry 'Exherbo GNU/Linux, with Linux ${release}' --class exherbo --class gnu-linux --class gnu --class os {
 set root='${BOOT_DEVICE}'
 search --no-floppy --fs-uuid --set=root ${BOOT_DEVICE_UUID}
 echo    'Loading Linux ${release} ...'
 linux   /vmlinuz-${release} ${LINUX_DEVICE} ${KERNEL_OPTS}
 initrd  /initramfs-${release}.img
}
EOF
    done
}

function generate_rescue_entry()
{
    [[ -d /boot/sysrcd ]] || return 0

    cat <<EOF
menuentry 'SysResCD' {
 set root='${BOOT_DEVICE}'
 search --no-floppy --fs-uuid --set=root ${BOOT_DEVICE_UUID}
 echo    'Loading SysResCD kernel ...'
 linux /sysrcd/altker64 setkmap=dvorak subdir=/sysrcd
 initrd /sysrcd/initram.igz
}
menuentry 'Boot existing Linux System with SysResCD Kernel' {
 set root='${BOOT_DEVICE}'
 search --no-floppy --fs-uuid --set=root ${BOOT_DEVICE_UUID}
 echo    'Loading SysResCD kernel ...'
 linux /sysrcd/altker64 setkmap=dvorak root=auto
 initrd /sysrcd/initram.igz
}
EOF
}

build_kernel || exit 1

mount /boot 2>&1 >/dev/null

install_kernel

if [[ -e /sbin/grub-mkconfig ]] ; then
    do_grub_mkconfig
else
    do_my_grub_config > ${GRUB_CONFIG}
#    ${EDITOR} ${GRUB_CONFIG}
fi

umount /boot 2>&1 >/dev/null
